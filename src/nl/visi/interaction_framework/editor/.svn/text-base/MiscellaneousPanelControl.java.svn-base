package nl.visi.interaction_framework.editor;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import java.util.List;

import javax.swing.DropMode;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import nl.visi.interaction_schema.AppendixTypeType;
import nl.visi.interaction_schema.ComplexElementTypeType;
import nl.visi.interaction_schema.ComplexElementTypeTypeRef;
import nl.visi.interaction_schema.ElementType;
import nl.visi.interaction_schema.GroupTypeType;
import nl.visi.interaction_schema.MessageInTransactionTypeType;
import nl.visi.interaction_schema.MessageInTransactionTypeType.Group;
import nl.visi.interaction_schema.OrganisationTypeType;
import nl.visi.interaction_schema.PersonTypeType;
import nl.visi.interaction_schema.ProjectTypeType;
import nl.visi.interaction_schema.TransactionPhaseTypeType;

public class MiscellaneousPanelControl extends PanelControl<ElementType> {
	private static final String MISCELLANEOUS_PANEL = "nl/visi/interaction_framework/editor/swixml/MiscellaneousPanel.xml";
	private JTable tbl_ComplexElements;
	private JPanel startDatePanel, endDatePanel, relationsPanel;
	private JLabel lbl_Code;
	private JComboBox cbx_ElementType, cbx_ComplexElements;
	private ComplexElementsTableModel complexElementsTableModel;
	private JButton btn_AddComplexElement, btn_RemoveComplexElement;

	private enum MiscellaneousTypes {
		AppendixType, GroupType, OrganisationType, PersonType, ProjectType, TransactionPhaseType;

		@Override
		public String toString() {
			return getBundle().getString("lbl_" + this.name());
		}

	}

	private enum MiscellaneousTableColumns {
		Id, ElementType, Description, StartDate, EndDate, State, DateLamu, UserLamu;

		@Override
		public String toString() {
			return getBundle().getString("lbl_" + name());
		}

	}

	@SuppressWarnings("serial")
	public class MiscellaneousTableModel extends ElementsTableModel<ElementType> {

		@Override
		public int getColumnCount() {
			return MiscellaneousTableColumns.values().length;
		}

		@Override
		public String getColumnName(int columnIndex) {
			return MiscellaneousTableColumns.values()[columnIndex].toString();
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			ElementType element = get(rowIndex);
			switch (MiscellaneousTableColumns.values()[columnIndex]) {
			case Id:
				return element.getId();
			case ElementType:
				String className = element.getClass().getSimpleName();
				String label = "lbl_" + className.substring(0, className.length() - 4);
				return getBundle().getString(label);
			case Description:
				if (element instanceof ProjectTypeType)
					return ((ProjectTypeType) element).getDescription();
				if (element instanceof PersonTypeType)
					return ((PersonTypeType) element).getDescription();
				if (element instanceof OrganisationTypeType)
					return ((OrganisationTypeType) element).getDescription();
				if (element instanceof GroupTypeType)
					return ((GroupTypeType) element).getDescription();
				if (element instanceof AppendixTypeType)
					return ((AppendixTypeType) element).getDescription();
				if (element instanceof TransactionPhaseTypeType)
					return ((TransactionPhaseTypeType) element).getDescription();
				return null;
			case StartDate:
				if (element instanceof ProjectTypeType)
					return getDate(((ProjectTypeType) element).getStartDate());
				if (element instanceof PersonTypeType)
					return getDate(((PersonTypeType) element).getStartDate());
				if (element instanceof OrganisationTypeType)
					return getDate(((OrganisationTypeType) element).getStartDate());
				if (element instanceof GroupTypeType)
					return getDate(((GroupTypeType) element).getStartDate());
				if (element instanceof AppendixTypeType)
					return getDate(((AppendixTypeType) element).getStartDate());
				if (element instanceof TransactionPhaseTypeType)
					return getDate(((TransactionPhaseTypeType) element).getStartDate());
				return null;
			case EndDate:
				if (element instanceof ProjectTypeType)
					return getDate(((ProjectTypeType) element).getEndDate());
				if (element instanceof PersonTypeType)
					return getDate(((PersonTypeType) element).getEndDate());
				if (element instanceof OrganisationTypeType)
					return getDate(((OrganisationTypeType) element).getEndDate());
				if (element instanceof GroupTypeType)
					return getDate(((GroupTypeType) element).getEndDate());
				if (element instanceof AppendixTypeType)
					return getDate(((AppendixTypeType) element).getEndDate());
				if (element instanceof TransactionPhaseTypeType)
					return getDate(((TransactionPhaseTypeType) element).getEndDate());
				return null;
			case State:
				if (element instanceof ProjectTypeType)
					return ((ProjectTypeType) element).getState();
				if (element instanceof PersonTypeType)
					return ((PersonTypeType) element).getState();
				if (element instanceof OrganisationTypeType)
					return ((OrganisationTypeType) element).getState();
				if (element instanceof GroupTypeType)
					return ((GroupTypeType) element).getState();
				if (element instanceof AppendixTypeType)
					return ((AppendixTypeType) element).getState();
				if (element instanceof TransactionPhaseTypeType)
					return ((TransactionPhaseTypeType) element).getState();
				return null;
			case DateLamu:
				if (element instanceof ProjectTypeType)
					return getDateTime(((ProjectTypeType) element).getDateLamu());
				if (element instanceof PersonTypeType)
					return getDateTime(((PersonTypeType) element).getDateLamu());
				if (element instanceof OrganisationTypeType)
					return getDateTime(((OrganisationTypeType) element).getDateLamu());
				if (element instanceof GroupTypeType)
					return getDateTime(((GroupTypeType) element).getDateLamu());
				if (element instanceof AppendixTypeType)
					return getDateTime(((AppendixTypeType) element).getDateLamu());
				if (element instanceof TransactionPhaseTypeType)
					return getDateTime(((TransactionPhaseTypeType) element).getDateLamu());
				return null;
			case UserLamu:
				if (element instanceof ProjectTypeType)
					return ((ProjectTypeType) element).getUserLamu();
				if (element instanceof PersonTypeType)
					return ((PersonTypeType) element).getUserLamu();
				if (element instanceof OrganisationTypeType)
					return ((OrganisationTypeType) element).getUserLamu();
				if (element instanceof GroupTypeType)
					return ((GroupTypeType) element).getUserLamu();
				if (element instanceof AppendixTypeType)
					return ((AppendixTypeType) element).getUserLamu();
				if (element instanceof TransactionPhaseTypeType)
					return ((TransactionPhaseTypeType) element).getUserLamu();
				return null;
			default:
				return null;
			}
		}
	}

	ComplexElementsTableModel getComplexElementsTableModel() {
		return complexElementsTableModel;
	}

	private enum ComplexElementsTableColumns {
		Id, Description, Navigate;

		@Override
		public String toString() {
			return getBundle().getString("lbl_" + name());
		}

	}

	@SuppressWarnings("serial")
	public class ComplexElementsTableModel extends ElementsTableModel<ComplexElementTypeType> {

		@Override
		public int getColumnCount() {
			return ComplexElementsTableColumns.values().length;
		}

		@Override
		public String getColumnName(int columnIndex) {
			return ComplexElementsTableColumns.values()[columnIndex].toString();
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			ComplexElementTypeType complexElement = get(rowIndex);
			switch (ComplexElementsTableColumns.values()[columnIndex]) {
			case Id:
				return complexElement.getId();
			case Description:
				return complexElement.getDescription();
			}
			return null;
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return columnIndex == ComplexElementsTableColumns.Navigate.ordinal();
		}

	}

	public MiscellaneousPanelControl() throws Exception {
		super(MISCELLANEOUS_PANEL);
		initMiscellaneousTable();
		initComplexElementsTable();

		for (MiscellaneousTypes type : MiscellaneousTypes.values()) {
			cbx_ElementType.addItem(type);
		}
		initStartDateField();
		initEndDateField();
	}

	private void initEndDateField() {
		endDateField = new DateField(endDatePanel);
		endDateField.addPropertyChangeListener("date", new PropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent e) {
				try {
					Date endDate = endDateField.getDate();
					if (endDate != null) {
						gcal.setTime(endDate);
						XMLGregorianCalendar xgcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);
						if (selectedElement instanceof AppendixTypeType)
							((AppendixTypeType) selectedElement).setEndDate(xgcal);
						else if (selectedElement instanceof GroupTypeType)
							((GroupTypeType) selectedElement).setEndDate(xgcal);
						else if (selectedElement instanceof OrganisationTypeType)
							((OrganisationTypeType) selectedElement).setEndDate(xgcal);
						else if (selectedElement instanceof PersonTypeType)
							((PersonTypeType) selectedElement).setEndDate(xgcal);
						else if (selectedElement instanceof ProjectTypeType)
							((ProjectTypeType) selectedElement).setEndDate(xgcal);
						else if (selectedElement instanceof TransactionPhaseTypeType)
							((TransactionPhaseTypeType) selectedElement).setEndDate(xgcal);
						elementsTableModel.fireTableRowsUpdated(selectedRow, selectedRow);
						if (!inSelection) {
							updateLamu(selectedElement, user);
							elementsTableModel.update(selectedRow);
						}
					}
				} catch (DatatypeConfigurationException e1) {
					e1.printStackTrace();
				}
			}
		});
		endDateField.setEnabled(false);
	}

	private void initStartDateField() {
		startDateField = new DateField(startDatePanel);
		startDateField.addPropertyChangeListener("date", new PropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent e) {
				try {
					Date startDate = startDateField.getDate();
					if (startDate != null) {
						gcal.setTime(startDate);
						XMLGregorianCalendar xgcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);
						if (selectedElement instanceof AppendixTypeType)
							((AppendixTypeType) selectedElement).setStartDate(xgcal);
						else if (selectedElement instanceof GroupTypeType)
							((GroupTypeType) selectedElement).setStartDate(xgcal);
						else if (selectedElement instanceof OrganisationTypeType)
							((OrganisationTypeType) selectedElement).setStartDate(xgcal);
						else if (selectedElement instanceof PersonTypeType)
							((PersonTypeType) selectedElement).setStartDate(xgcal);
						else if (selectedElement instanceof ProjectTypeType)
							((ProjectTypeType) selectedElement).setStartDate(xgcal);
						else if (selectedElement instanceof TransactionPhaseTypeType)
							((TransactionPhaseTypeType) selectedElement).setStartDate(xgcal);
						elementsTableModel.fireTableRowsUpdated(selectedRow, selectedRow);
						if (!inSelection) {
							updateLamu(selectedElement, user);
							elementsTableModel.update(selectedRow);
						}
					}
				} catch (DatatypeConfigurationException e1) {
					e1.printStackTrace();
				}
			}
		});
		startDateField.setEnabled(false);
	}

	@SuppressWarnings("serial")
	private void initComplexElementsTable() {
		complexElementsTableModel = new ComplexElementsTableModel();
		complexElementsTableModel.setSorted(false);
		tbl_ComplexElements.setModel(complexElementsTableModel);
		tbl_ComplexElements.setFillsViewportHeight(true);
		tbl_ComplexElements.setDropMode(DropMode.INSERT_ROWS);
		tbl_ComplexElements.setTransferHandler(getTransferHandler(tbl_ComplexElements, complexElementsTableModel, true));
		tbl_ComplexElements.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				int selectedRow = tbl_ComplexElements.getSelectedRow();
				btn_RemoveComplexElement.setEnabled(selectedRow >= 0);
			}
		});
		TableColumn navigateColumn = tbl_ComplexElements.getColumnModel().getColumn(ComplexElementsTableColumns.Navigate.ordinal());
		navigateColumn.setMaxWidth(50);
		navigateColumn.setCellRenderer(getButtonTableCellRenderer());
		navigateColumn.setCellEditor(new NavigatorEditor() {
			@Override
			protected void navigate() {
				int row = tbl_ComplexElements.getSelectedRow();
				ComplexElementTypeType complexElementTypeType = complexElementsTableModel.get(row);
				if (complexElementTypeType != null) {
					Editor.getMainFrameControl().navigate(complexElementTypeType);
				}
			}
		});
	}

	private void initMiscellaneousTable() {
		elementsTableModel = new MiscellaneousTableModel();
		tbl_Elements.setModel(elementsTableModel);
		tbl_Elements.setFillsViewportHeight(true);
		tbl_Elements.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				if (e.getValueIsAdjusting())
					return;
				updateSelectionArea(e);
			}
		});
	}

	@Override
	public void fillTable() {
		Store store = Editor.getStore();

		elementsTableModel.clear();
		List<ProjectTypeType> projects = store.getElements(ProjectTypeType.class);
		for (ProjectTypeType project : projects) {
			elementsTableModel.add(project);
		}
		List<PersonTypeType> persons = store.getElements(PersonTypeType.class);
		for (PersonTypeType person : persons) {
			elementsTableModel.add(person);
		}
		List<OrganisationTypeType> organisations = store.getElements(OrganisationTypeType.class);
		for (OrganisationTypeType organisation : organisations) {
			elementsTableModel.add(organisation);
		}
		List<GroupTypeType> groups = store.getElements(GroupTypeType.class);
		for (GroupTypeType group : groups) {
			elementsTableModel.add(group);
		}
		List<AppendixTypeType> appendices = store.getElements(AppendixTypeType.class);
		for (AppendixTypeType appendix : appendices) {
			elementsTableModel.add(appendix);
		}
		List<TransactionPhaseTypeType> transactionPhases = store.getElements(TransactionPhaseTypeType.class);
		for (TransactionPhaseTypeType transactionPhase : transactionPhases) {
			elementsTableModel.add(transactionPhase);
		}
	}

	public void newElement() {
		ElementType et = null;
		try {
			MiscellaneousTypes type = MiscellaneousTypes.values()[cbx_ElementType.getSelectedIndex()];
			switch (type) {
			case GroupType:
				et = objectFactory.createGroupTypeType();
				break;
			case OrganisationType:
				et = objectFactory.createOrganisationTypeType();
				break;
			case PersonType:
				et = objectFactory.createPersonTypeType();
				break;
			case ProjectType:
				et = objectFactory.createProjectTypeType();
				break;
			case AppendixType:
				et = objectFactory.createAppendixTypeType();
				break;
			case TransactionPhaseType:
				et = objectFactory.createTransactionPhaseTypeType();
				break;
			}

			newElement(et, type.name() + "_");
		} catch (Exception e) {
			e.printStackTrace();
		}

		int row = elementsTableModel.add(et);
		tbl_Elements.getSelectionModel().setSelectionInterval(row, row);
	}

	public void deleteElement() {
		int selectedMiscellaneousRow = tbl_Elements.getSelectedRow();
		ElementType elementType = elementsTableModel.get(selectedMiscellaneousRow);
		String className = elementType.getClass().getSimpleName();
		MiscellaneousTypes type = MiscellaneousTypes.valueOf(className.substring(0, className.length() - 4));
		List<Object> mittElements = null;
		switch (type) {
		case AppendixType:
			break;
		case GroupType:
			mittElements = Editor.getStore().getElements(MessageInTransactionTypeType.class);
			for (Object object : mittElements) {
				MessageInTransactionTypeType mittElement = (MessageInTransactionTypeType) object;
				Group group = mittElement.getGroup();
				if (group != null) {
					GroupTypeType groupType = group.getGroupType();
					if (groupType == null) {
						groupType = (GroupTypeType) group.getGroupTypeRef().getIdref();
					}
					if (groupType != null && groupType.equals(elementType)) {
						mittElement.setGroup(null);
					}
				}
			}
			break;
		case OrganisationType:
			break;
		case PersonType:
			break;
		case ProjectType:
			break;
		case TransactionPhaseType:
			mittElements = Editor.getStore().getElements(MessageInTransactionTypeType.class);
			for (Object object : mittElements) {
				MessageInTransactionTypeType mittElement = (MessageInTransactionTypeType) object;
				MessageInTransactionTypeType.TransactionPhase transactionPhase = mittElement.getTransactionPhase();
				if (transactionPhase != null) {
					TransactionPhaseTypeType transactionPhaseType = transactionPhase.getTransactionPhaseType();
					if (transactionPhaseType == null) {
						transactionPhaseType = (TransactionPhaseTypeType) transactionPhase.getTransactionPhaseTypeRef().getIdref();
					}
					if (transactionPhaseType != null && transactionPhaseType.equals(elementType)) {
						mittElement.setTransactionPhase(null);
					}
				}
			}
			break;
		}
		elementsTableModel.remove(selectedMiscellaneousRow);
		Editor.getStore().remove(elementType.getId());
	}

	protected void updateSelectionArea(ListSelectionEvent e) {
		inSelection = true;

		selectedRow = tbl_Elements.getSelectedRow();
		tbl_Elements.scrollRectToVisible(tbl_Elements.getCellRect(selectedRow, 0, true));
		boolean rowSelectied = selectedRow >= 0;
		selectedElement = rowSelectied ? elementsTableModel.get(selectedRow) : null;
		boolean isGroupType = selectedElement instanceof GroupTypeType;
		boolean isTransactionPhaseType = selectedElement instanceof TransactionPhaseTypeType;
		btn_DeleteElement.setEnabled(rowSelectied);
		tfd_Id.setEnabled(rowSelectied);
		tfd_Description.setEnabled(rowSelectied);
		startDateField.setEnabled(rowSelectied);
		endDateField.setEnabled(rowSelectied);
		tfd_State.setEnabled(rowSelectied);
		tfd_Language.setEnabled(rowSelectied);
		tfd_Category.setEnabled(rowSelectied);
		tfd_HelpInfo.setEnabled(rowSelectied);
		tfd_Code.setEnabled(rowSelectied);
		lbl_Code.setVisible(!isGroupType);
		tfd_Code.setVisible(!isGroupType);
		tfd_Code.getParent().invalidate();
		tbl_ComplexElements.setEnabled(rowSelectied);
		cbx_ComplexElements.setEnabled(rowSelectied);
		relationsPanel.setVisible(!isGroupType && !isTransactionPhaseType);
		relationsPanel.invalidate();
		if (rowSelectied) {
			complexElementsTableModel.clear();
			tfd_Id.setText(selectedElement.getId());
			List<Object> ceList = null;
			if (selectedElement instanceof ProjectTypeType) {
				ProjectTypeType projectType = (ProjectTypeType) selectedElement;
				tfd_Description.setText(projectType.getDescription());
				startDateField.setDate(projectType.getStartDate().toGregorianCalendar().getTime());
				endDateField.setDate(projectType.getEndDate().toGregorianCalendar().getTime());
				tfd_State.setText(projectType.getState());
				tfd_Language.setText(projectType.getLanguage());
				tfd_Category.setText(projectType.getCategory());
				tfd_HelpInfo.setText(projectType.getHelpInfo());
				tfd_Code.setText(projectType.getCode());
				ProjectTypeType.ComplexElements complexElements = projectType.getComplexElements();
				if (complexElements != null) {
					ceList = complexElements.getComplexElementTypeOrComplexElementTypeRef();
				}
			} else if (selectedElement instanceof PersonTypeType) {
				PersonTypeType personType = (PersonTypeType) selectedElement;
				tfd_Description.setText(personType.getDescription());
				startDateField.setDate(personType.getStartDate().toGregorianCalendar().getTime());
				endDateField.setDate(personType.getEndDate().toGregorianCalendar().getTime());
				tfd_State.setText(personType.getState());
				tfd_Language.setText(personType.getLanguage());
				tfd_Category.setText(personType.getCategory());
				tfd_HelpInfo.setText(personType.getHelpInfo());
				tfd_Code.setText(personType.getCode());
				PersonTypeType.ComplexElements complexElements = personType.getComplexElements();
				if (complexElements != null) {
					ceList = complexElements.getComplexElementTypeOrComplexElementTypeRef();
				}
			} else if (selectedElement instanceof OrganisationTypeType) {
				OrganisationTypeType organisationType = (OrganisationTypeType) selectedElement;
				tfd_Description.setText(organisationType.getDescription());
				startDateField.setDate(organisationType.getStartDate().toGregorianCalendar().getTime());
				endDateField.setDate(organisationType.getEndDate().toGregorianCalendar().getTime());
				tfd_State.setText(organisationType.getState());
				tfd_Language.setText(organisationType.getLanguage());
				tfd_Category.setText(organisationType.getCategory());
				tfd_HelpInfo.setText(organisationType.getHelpInfo());
				tfd_Code.setText(organisationType.getCode());
				OrganisationTypeType.ComplexElements complexElements = organisationType.getComplexElements();
				if (complexElements != null) {
					ceList = complexElements.getComplexElementTypeOrComplexElementTypeRef();
				}
			} else if (selectedElement instanceof GroupTypeType) {
				tfd_Description.setText(((GroupTypeType) selectedElement).getDescription());
				startDateField.setDate(((GroupTypeType) selectedElement).getStartDate().toGregorianCalendar().getTime());
				endDateField.setDate(((GroupTypeType) selectedElement).getEndDate().toGregorianCalendar().getTime());
				tfd_State.setText(((GroupTypeType) selectedElement).getState());
				tfd_Language.setText(((GroupTypeType) selectedElement).getLanguage());
				tfd_Category.setText(((GroupTypeType) selectedElement).getCategory());
				tfd_HelpInfo.setText(((GroupTypeType) selectedElement).getHelpInfo());
			} else if (selectedElement instanceof AppendixTypeType) {
				AppendixTypeType appendixType = (AppendixTypeType) selectedElement;
				tfd_Description.setText(appendixType.getDescription());
				startDateField.setDate(appendixType.getStartDate().toGregorianCalendar().getTime());
				endDateField.setDate(appendixType.getEndDate().toGregorianCalendar().getTime());
				tfd_State.setText(appendixType.getState());
				tfd_Language.setText(appendixType.getLanguage());
				tfd_Category.setText(appendixType.getCategory());
				tfd_HelpInfo.setText(appendixType.getHelpInfo());
				tfd_Code.setText(appendixType.getCode());
				AppendixTypeType.ComplexElements complexElements = appendixType.getComplexElements();
				if (complexElements != null) {
					ceList = complexElements.getComplexElementTypeOrComplexElementTypeRef();
				}
			} else if (selectedElement instanceof TransactionPhaseTypeType) {
				TransactionPhaseTypeType transactionPhaseType = (TransactionPhaseTypeType) selectedElement;
				tfd_Description.setText(transactionPhaseType.getDescription());
				startDateField.setDate(transactionPhaseType.getStartDate().toGregorianCalendar().getTime());
				endDateField.setDate(transactionPhaseType.getEndDate().toGregorianCalendar().getTime());
				tfd_State.setText(transactionPhaseType.getState());
				tfd_Language.setText(transactionPhaseType.getLanguage());
				tfd_Category.setText(transactionPhaseType.getCategory());
				tfd_HelpInfo.setText(transactionPhaseType.getHelpInfo());
				tfd_Code.setText(transactionPhaseType.getCode());
			}
			if (ceList != null) {
				for (Object object : ceList) {
					ComplexElementTypeType element = null;
					if (object instanceof ComplexElementTypeTypeRef) {
						element = (ComplexElementTypeType) ((ComplexElementTypeTypeRef) object).getIdref();
					} else {
						element = (ComplexElementTypeType) object;
					}
					complexElementsTableModel.add(element);
				}
			}

			cbx_ComplexElements.removeAllItems();
			cbx_ComplexElements.addItem(null);
			List<ComplexElementTypeType> elements = Editor.getStore().getElements(ComplexElementTypeType.class);
			for (ComplexElementTypeType element : elements) {
				cbx_ComplexElements.addItem(element.getId());
			}

		} else {
			selectedElement = null;
			tfd_Id.setText("");
			tfd_Description.setText("");
			startDateField.setDate(null);
			endDateField.setDate(null);
			tfd_State.setText("");
			tfd_Language.setText("");
			tfd_Category.setText("");
			tfd_HelpInfo.setText("");
			tfd_Code.setText("");
			complexElementsTableModel.clear();
			cbx_ComplexElements.removeAllItems();
		}

		inSelection = false;
	}

	public void selectComplexElement() {
		int selectedIndex = cbx_ComplexElements.getSelectedIndex();
		btn_AddComplexElement.setEnabled(selectedIndex > 0);
	}

	public void addComplexElement() {
		String ceId = (String) cbx_ComplexElements.getSelectedItem();
		assert ceId != null;
		ComplexElementTypeType element = Editor.getStore().getElement(ComplexElementTypeType.class, ceId);
		ComplexElementTypeTypeRef ref = objectFactory.createComplexElementTypeTypeRef();
		ref.setIdref(element);
		List<Object> list = null;
		if (selectedElement instanceof AppendixTypeType) {
			AppendixTypeType.ComplexElements complexElements = ((AppendixTypeType) selectedElement).getComplexElements();
			if (complexElements == null) {
				complexElements = objectFactory.createAppendixTypeTypeComplexElements();
				((AppendixTypeType) selectedElement).setComplexElements(complexElements);
			}
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		} else if (selectedElement instanceof OrganisationTypeType) {
			OrganisationTypeType.ComplexElements complexElements = ((OrganisationTypeType) selectedElement).getComplexElements();
			if (complexElements == null) {
				complexElements = objectFactory.createOrganisationTypeTypeComplexElements();
				((OrganisationTypeType) selectedElement).setComplexElements(complexElements);
			}
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		} else if (selectedElement instanceof PersonTypeType) {
			PersonTypeType.ComplexElements complexElements = ((PersonTypeType) selectedElement).getComplexElements();
			if (complexElements == null) {
				complexElements = objectFactory.createPersonTypeTypeComplexElements();
				((PersonTypeType) selectedElement).setComplexElements(complexElements);
			}
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		} else if (selectedElement instanceof ProjectTypeType) {
			ProjectTypeType.ComplexElements complexElements = ((ProjectTypeType) selectedElement).getComplexElements();
			if (complexElements == null) {
				complexElements = objectFactory.createProjectTypeTypeComplexElements();
				((ProjectTypeType) selectedElement).setComplexElements(complexElements);
			}
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		}
		list.add(ref);
		complexElementsTableModel.add(element);
		updateLamu(selectedElement, user);
		elementsTableModel.update(selectedRow);
	}

	public void removeComplexElement() {
		int selectedRow = tbl_ComplexElements.getSelectedRow();
		List<Object> list = null;
		ComplexElementTypeType complexElement = complexElementsTableModel.remove(selectedRow);
		if (selectedElement instanceof AppendixTypeType) {
			AppendixTypeType.ComplexElements complexElements = ((AppendixTypeType) selectedElement).getComplexElements();
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		} else if (selectedElement instanceof OrganisationTypeType) {
			OrganisationTypeType.ComplexElements complexElements = ((OrganisationTypeType) selectedElement).getComplexElements();
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		} else if (selectedElement instanceof PersonTypeType) {
			PersonTypeType.ComplexElements complexElements = ((PersonTypeType) selectedElement).getComplexElements();
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		} else if (selectedElement instanceof ProjectTypeType) {
			ProjectTypeType.ComplexElements complexElements = ((ProjectTypeType) selectedElement).getComplexElements();
			list = complexElements.getComplexElementTypeOrComplexElementTypeRef();
		}
		assert list != null;
		for (Object object : list) {
			ComplexElementTypeType element = null;
			if (object instanceof ComplexElementTypeTypeRef) {
				element = (ComplexElementTypeType) ((ComplexElementTypeTypeRef) object).getIdref();
			} else if (object instanceof ComplexElementTypeType) {
				element = (ComplexElementTypeType) object;
			}
			if (element != null) {
				if (complexElement.equals(element)) {
					list.remove(object);
					break;
				}
			}
		}
		updateLamu(selectedElement, user);
		elementsTableModel.update(selectedRow);
	}

}
